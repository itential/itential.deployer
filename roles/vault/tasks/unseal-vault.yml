# Copyright (c) 2024, Itential, Inc
# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)
---
# Saving unseal keys to a directory (may remove this later for security)
- name: Create directory to store unseal keys
  ansible.builtin.file:
    path: "{{ vault_unseal_keys_dir }}"
    state: directory
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: "0750"

- name: Create directory to store root key
  ansible.builtin.file:
    path: "{{ vault_root_key_dir }}"
    state: directory
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: "0750"

# Show status of vault server
- name: Get status of vault server
  ansible.builtin.command: vault status -format json
  environment:
    VAULT_ADDR: "http://{{ inventory_hostname }}:{{ vault_port }}"
  register: vault_status
  failed_when:
    - vault_status.stderr_lines is defined
    - vault_status.stderr_lines | length > 0
  changed_when: false

- name: Parse output of vault status
  ansible.builtin.set_fact:
    vault_status_parsed: "{{ vault_status.stdout | from_json }}"

- name: Initialize vault server
  ansible.builtin.command: vault operator init -format json
  environment:
    VAULT_ADDR: "http://{{ inventory_hostname }}:{{ vault_port }}"
  register: vault_init_results
  changed_when: vault_init_results.changed
  when: not vault_status_parsed.initialized

- name: Parse output of vault init
  ansible.builtin.set_fact:
    vault_init_parsed: "{{ vault_init_results.stdout | from_json }}"
  when: not vault_status_parsed.initialized

- name: Write unseal keys to files
  ansible.builtin.copy:
    dest: "{{ vault_unseal_keys_dir }}/unseal_key_{{ item.0 }}"
    content: "{{ item.1 }}"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: "0660"
  with_indexed_items: "{{ vault_init_parsed.unseal_keys_hex }}"
  when: not vault_status_parsed.initialized
  no_log: true

- name: Write root token to file
  ansible.builtin.copy:
    content: "{{ vault_init_parsed.root_token }}"
    dest: "{{ vault_root_key_dir }}/token.txt"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: "0660"
  when: not vault_status_parsed.initialized

- name: Get path to unseal keys
  ansible.builtin.find:
    paths: "{{ vault_unseal_keys_dir }}"
  register: unseal_key_files
  when: vault_status_parsed.sealed

- name: Read unseal key contents
  ansible.builtin.command: cat {{ item.path }}
  with_items: "{{ unseal_key_files.files }}"
  register: unseal_keys
  when: vault_status_parsed.sealed
  no_log: true
  changed_when: false

- name: Unseal vault with unseal keys
  ansible.builtin.command: vault operator unseal {{ item.stdout }}
  environment:
    VAULT_ADDR: "http://{{ inventory_hostname }}:{{ vault_port }}"
  with_items: "{{ unseal_keys.results }}"
  register: vault_unseal_result
  changed_when: vault_unseal_result.changed
  when: vault_status_parsed.sealed
  no_log: true

- name: Get root key
  ansible.builtin.slurp:
    src: '{{ vault_root_key_dir }}/token.txt'
  register: root_key

# Check if kv-v2 engine exists
- name: Check for secrets engine
  ansible.builtin.command: vault secrets list
  environment:
    VAULT_ADDR: "http://{{ inventory_hostname }}:{{ vault_port }}"
    VAULT_TOKEN: "{{ root_key.content | b64decode }}"
  register: secrets
  changed_when: false

- name: Enable KV Secrets Engine
  ansible.builtin.command: vault secrets enable -path={{ vault_name }} -version=2 kv
  environment:
    VAULT_ADDR: "http://{{ inventory_hostname }}:{{ vault_port }}"
    VAULT_TOKEN: "{{ root_key.content | b64decode }}"
  register: vault_secrets_enable_result
  changed_when: vault_secrets_enable_result.changed
  when: 'vault_name not in secrets.stdout'
