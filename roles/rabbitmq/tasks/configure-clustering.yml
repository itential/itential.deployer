# Copyright (c) 2024, Itential, Inc
# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)
---
- name: Write all RabbitMQ nodes to the hosts file
  ansible.builtin.lineinfile:
    path: "/etc/hosts"
    line: "{{ hostvars[item].ansible_default_ipv4.address }} {{ item }} {{ hostvars[item].inventory_hostname_short }} rabbit{{ my_idx + 1 }}"
  loop: "{{ lookup('inventory_hostnames', 'rabbitmq', wantlist=True) }}"
  loop_control:
    index_var: my_idx
  when: inventory_hostname in groups['rabbitmq']

- name: Write all RabbitMQ nodes to the hosts file for secondary DR
  ansible.builtin.lineinfile:
    path: "/etc/hosts"
    line: "{{ hostvars[item].ansible_default_ipv4.address }} {{ item }} {{ hostvars[item].inventory_hostname_short }} rabbit{{ my_idx + 1 }}"
  loop: "{{ lookup('inventory_hostnames', 'rabbitmq_secondary', wantlist=True) }}"
  loop_control:
    index_var: my_idx
  when:
    - groups['rabbitmq_secondary'] is defined
    - inventory_hostname in groups['rabbitmq_secondary']

- name: Write all RabbitMQ nodes to the config file
  ansible.builtin.lineinfile:
    path: "{{ rabbitmq_config }}"
    insertafter: "cluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config"
    line: "cluster_formation.classic_config.nodes.{{ my_idx + 1 }} = rabbit@{{ hostvars[item].inventory_hostname_short }}"
  loop: "{{ lookup('inventory_hostnames', 'rabbitmq', wantlist=True) }}"
  loop_control:
    index_var: my_idx
  when: inventory_hostname in groups['rabbitmq']

- name: Write all RabbitMQ nodes to the config file for secondary DR
  ansible.builtin.lineinfile:
    path: "{{ rabbitmq_config }}"
    insertafter: "cluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config"
    line: "cluster_formation.classic_config.nodes.{{ my_idx + 1 }} = rabbit@{{ hostvars[item].inventory_hostname_short }}"
  loop: "{{ lookup('inventory_hostnames', 'rabbitmq_secondary', wantlist=True) }}"
  loop_control:
    index_var: my_idx
  when:
    - groups['rabbitmq_secondary'] is defined
    - inventory_hostname in groups['rabbitmq_secondary']

- name: Edit config variable
  ansible.builtin.lineinfile:
    path: "/root/.bashrc"
    line: "export RABBITMQ_CONFIG_FILE={{ rabbitmq_config }}"
    insertafter: "EOF"

# RabbitMQ nodes and CLI tools (e.g. rabbitmqctl) use a cookie to determine
# whether they are allowed to communicate with each other. For two nodes to be
# able to communicate they must have the same shared secret called the Erlang
# cookie. The cookie is just a string of alphanumeric characters up to 255
# characters in size. It is usually stored in a local file. The file must be
# only accessible to the owner (e.g. have UNIX permissions of 600 or similar).
# Every cluster node must have the same cookie.
#
# The cookie is using a jinja template to generate a string by concatenating the
# string "itential" with the current date (yyyy-mm-dd) and then converting that
# into a UUID string. This should be good enough to create unique-ish cookies.
- name: Create Erlang cookie file
  ansible.builtin.template:
    owner: "{{ rabbitmq_owner }}"
    group: "{{ rabbitmq_group }}"
    mode: "0600"
    dest: "{{ rabbitmq_erlang_cookie }}"
    src: erlang.cookie.j2

# Check if firewalld is running, if it is then open the appropriate ports
- name: Gather service facts
  ansible.builtin.service_facts:

- name: Open Ports on FirewallD Public Zone
  ansible.posix.firewalld:
    port: "{{ item }}"
    permanent: true
    state: enabled
    zone: public
    immediate: true
  loop:
    - "{{ rabbitmq_cluster_port }}/tcp"
    - "{{ rabbitmq_epmd_port }}/tcp"
  when:
    - ansible_facts.services["firewalld.service"] is defined
    - ansible_facts.services["firewalld.service"].state == "running"
    - ansible_facts.services["firewalld.service"].status == "enabled"
