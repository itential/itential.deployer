# Copyright (c) 2024, Itential, Inc
# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)
---
- name: Include release vars
  ansible.builtin.include_vars:
    file: "{{ item }}"
  with_first_found:
    - "release-{{ iap_release }}.yml"
    - "release-undefined.yml"

- name: Check for valid RabbitMQ release
  ansible.builtin.fail:
    msg: "Deployer installer does not support installing RabbitMQ on IAP version {{ iap_release }}"
  when: invalid_rabbitmq_packages is defined

- name: Install base OS packages
  ansible.builtin.include_role:
    name: os
  tags: install_base_os_packages

- name: Gather service facts
  ansible.builtin.service_facts:

- name: Stop rabbitmq service
  ansible.builtin.service:
    name: rabbitmq-server
    state: stopped
  when:
    - ansible_facts.services["rabbitmq-server.service"] is defined
    - ansible_facts.services["rabbitmq-server.service"].state == "running"

- name: Include tasks to install RabbitMQ (online)
  ansible.builtin.include_tasks:
    file: rabbitmq-online.yml
  when: not offline_install

- name: Include tasks to install RabbitMQ (offline)
  ansible.builtin.include_tasks:
    file: rabbitmq-offline.yml
  when: offline_install

- name: Set rabbitmq user home directory
  ansible.builtin.user:
    name: rabbitmq
    home: "{{ rabbitmq_home_dir }}"

- name: Create systemd dir
  ansible.builtin.file:
    name: /etc/systemd/system/rabbitmq-server.service.d
    state: directory
    mode: "0755"

- name: Set rabbitmq filesystem limit
  ansible.builtin.copy:
    src: "{{ role_path }}/files/limits.conf"
    dest: /etc/systemd/system/rabbitmq-server.service.d/limits.conf
    mode: "0644"

- name: Create rabbitmq config file
  ansible.builtin.template:
    src: rabbitmq.conf.j2
    dest: "{{ rabbitmq_config }}"
    owner: "{{ rabbitmq_owner }}"
    group: "{{ rabbitmq_group }}"
    mode: "0640"

- name: Include tasks to handle custom configuration
  ansible.builtin.include_tasks:
    file: configure-custom-env.yml

- name: Include tasks to configure clustering
  ansible.builtin.include_tasks:
    file: configure-clustering.yml
  when: rabbitmq_cluster | bool

# Check if firewalld is running, if it is then open the appropriate ports
- name: Open Port on FirewallD Public Zone
  ansible.posix.firewalld:
    port: "{{ item }}"
    permanent: true
    state: enabled
    zone: public
    immediate: true
  loop:
    - "{{ rabbitmq_port }}/tcp"
    - "{{ rabbitmq_mgt_console_port }}/tcp"
  when:
    - ansible_facts.services["firewalld.service"] is defined
    - ansible_facts.services["firewalld.service"].state == "running"
    - ansible_facts.services["firewalld.service"].status == "enabled"

- name: Enable rabbitmq services
  ansible.builtin.systemd:
    name: rabbitmq-server
    enabled: true
    daemon_reload: true
    state: restarted

# Enables the rabbitmq UI available at 15672
- name: Enable rabbitmq management console
  ansible.builtin.command:
    cmd: rabbitmq-plugins enable rabbitmq_management
  register: output
  changed_when: output.rc != 0

# Create & tag the required rabbitmq users
- name: Create admin user
  ansible.builtin.command:
    cmd: "rabbitmqctl add_user {{ rabbitmq_admin_user }} {{ rabbitmq_admin_password }}"
  register: result
  changed_when: result.rc != 0
  failed_when:
    - result.rc is defined
    - result.rc > 0
    - "'already exists' not in result.stderr"

- name: Set administrator tag for admin user
  ansible.builtin.command:
    cmd: "rabbitmqctl set_user_tags {{ rabbitmq_admin_user }} administrator"
  register: output
  changed_when: output.rc != 0

- name: Set permissions for admin user
  ansible.builtin.command:
    cmd: "rabbitmqctl set_permissions -p / {{ rabbitmq_admin_user }} \".*\" \".*\" \".*\""
  register: output
  changed_when: output.rc != 0

- name: Create iap vhost
  ansible.builtin.command:
    cmd: "rabbitmqctl add_vhost {{ rabbitmq_vhost }}"
  register: output
  changed_when: output.rc != 0

- name: Create itential user
  ansible.builtin.command:
    cmd: "rabbitmqctl add_user {{ rabbitmq_user }} {{ rabbitmq_password }}"
  register: result
  changed_when: result.rc != 0
  failed_when:
    - result.rc is defined
    - result.rc > 0
    - "'already exists' not in result.stderr"

# Required for event deduping
- name: Set monitoring tag for itential user
  ansible.builtin.command:
    cmd: "rabbitmqctl set_user_tags {{ rabbitmq_user }} monitoring"
  register: output
  changed_when: output.rc != 0

- name: Set permissions for itential user
  ansible.builtin.command:
    cmd: "rabbitmqctl set_permissions -p {{ rabbitmq_vhost }} {{ rabbitmq_user }} \".*\" \".*\" \".*\""
  register: output
  changed_when: output.rc != 0

- name: Include tasks to enable clustering
  ansible.builtin.include_tasks:
    file: enable-clustering.yml
  when: rabbitmq_cluster | bool

- name: Get installed erlang version
  ansible.builtin.command:
    cmd: rabbitmq-diagnostics erlang_version
  register: erlang_version
  changed_when: erlang_version.rc != 0

- name: Write erlang release information
  ansible.builtin.lineinfile:
    path: "{{ itential_release_file }}"
    line: "ERLANG={{ erlang_version.stdout_lines[1] }}"
    create: true
    mode: "0644"

- name: Get installed rabbitmq version
  ansible.builtin.command:
    cmd: rabbitmqctl version
  register: rabbitmq_version
  changed_when: rabbitmq_version.rc != 0

- name: Write rabbitmq release information
  ansible.builtin.lineinfile:
    path: "{{ itential_release_file }}"
    line: "RABBITMQ={{ rabbitmq_version.stdout }}"
