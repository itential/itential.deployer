# Copyright (c) 2024, Itential, Inc
# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)
---
- name: Validate required variables are set
  ansible.builtin.assert:
    that:
      - offline_download_dir is defined
      - offline_download_method is defined
      - offline_download_packages is defined
    msg: offline_download_dir, offline_download_method and offline_download_packages must be set

- name: Validate offline_download_method method
  ansible.builtin.assert:
    that: offline_download_method in
          ['yum_module', 'yum_install', 'yum_reinstall', 'repotrack', 'yumdownloader', 'get_url']
    msg: invalid download method

- name: Download packages
  when:
    - offline_download_packages is defined
    - offline_download_packages is iterable
    - offline_download_packages | length > 0
  block:
    - name: Create download directory
      ansible.builtin.file:
        path: "{{ offline_download_dir }}"
        state: directory
        mode: '0755'

    - name: Download packages (ansible dnf module)
      ansible.builtin.dnf:
        name: "{{ offline_download_packages }}"
        state: present
        download_only: true
        download_dir: "{{ offline_download_dir }}"
      when: offline_download_method == "yum_module"

    - name: Download packages (yum install) # noqa command-instead-of-module
      ansible.builtin.command:
        cmd: "yum install --downloadonly --downloaddir {{ offline_download_dir }}
              -y {{ offline_download_packages }}"
      changed_when: true
      when: offline_download_method == "yum_install"

    - name: Download packages (yum reinstall) # noqa command-instead-of-module
      ansible.builtin.command:
        cmd: "yum reinstall --downloadonly --downloaddir {{ offline_download_dir }}
              -y {{ offline_download_packages }}"
      changed_when: true
      when: offline_download_method == "yum_reinstall"

    - name: Download packages (repotrack)
      ansible.builtin.command:
        cmd: repotrack "{{ offline_download_packages }}"
      args:
        chdir: "{{ offline_download_dir }}"
      changed_when: true
      when: offline_download_method == "repotrack"

    - name: Use yumdownloader
      when: offline_download_method == "yumdownloader"
      block:
        - name: Install Yum utils
          ansible.builtin.dnf:
            name: yum-utils
            state: present

        - name: Download packages (yumdownloader)
          ansible.builtin.command:
            cmd: "yumdownloader --resolve --downloaddir {{ offline_download_dir }}
                  {{ offline_download_packages | join(' ') }}"
          changed_when: true
          failed_when: false

    - name: Download packages (get_url)
      ansible.builtin.get_url:
        url: "{{ package }}"
        dest: "{{ offline_download_dir }}"
        mode: '0755'
        # Sets the appropriate header based on the repository type:
        # - For JFrog: Uses the "X-JFrog-Art-Api" header with the API key if
        #   "repository_api_key" is defined and "jfrog" is part of the download URL.
        # - For Gitlab: Uses the "PRIVATE-TOKEN" header with the API key if
        #   "repository_api_key" is defined and "gitlab" is part of the download URL.
        # - For Nexus: Uses a default header ("Accept: application/octet-stream") since
        #   Nexus doesn't support API key authentication.
        headers: >-
          {%- if repository_api_key is defined and package is search("jfrog") -%}
            {"X-JFrog-Art-Api": "{{ repository_api_key }}", "Accept": "application/octet-stream"}
          {%- elif repository_api_key is defined and package is search("gitlab") -%}
            {"PRIVATE-TOKEN": "{{ repository_api_key }}", "Accept": "application/octet-stream"}
          {%- else -%}
            {"Accept": "application/octet-stream"}
          {%- endif -%}
        url_username: "{{ repository_username | default(omit) }}"
        url_password: "{{ repository_password | default(omit) }}"
        validate_certs: true
      loop: "{{ offline_download_packages }}"
      loop_control:
        loop_var: package
      when:
        - offline_download_method == "get_url"
        - "'http' in package"
        - package.endswith('.rpm')
