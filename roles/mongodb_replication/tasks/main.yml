# Copyright (c) 2024, Itential, Inc
# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)
---
- name: Check the auth status
  ansible.builtin.include_role:
    name: mongodb_common
    tasks_from: check-auth-status.yml

# This task should run on ALL hosts when deploying a replica set
- name: Modify mongod.conf to enable replication
  ansible.builtin.lineinfile:
    path: "{{ mongo_conf_file }}"
    regexp: "^#replication:"
    line: "replication:"
  register: result1

# This task should run on ALL hosts when deploying a replica set
- name: Modify mongod.conf to set the replica set name
  ansible.builtin.lineinfile:
    path: "{{ mongo_conf_file }}"
    regexp: "^  #replSetName: rs0"
    line: "  replSetName: {{ mongo_replset_name }}"
  register: result2

- name: Restart mongo
  ansible.builtin.include_role:
    name: mongodb_common
    tasks_from: restart-mongo.yml
  when: result1.changed or result2.changed

- name: Set empty array of mongo servers
  ansible.builtin.set_fact:
    mongodb_servers: []

# This task should always run, arbiter or not
- name: Create the replicaset members list (no arbiter)
  ansible.builtin.set_fact:
    mongodb_servers: "{{ mongodb_servers + [item + ':' + mongo_port | string] }}"
  with_items: "{{ groups.mongodb }}"
  when:
    - inventory_hostname in groups.mongodb
    - groups.mongodb.index(inventory_hostname) == 0

# This task will only run when there is an arbiter defined in the hosts file
- name: Add the arbiter to the list of servers when there is one
  ansible.builtin.set_fact:
    mongodb_servers: "{{ mongodb_servers + [item + ':' + mongo_port | string] }}"
  with_items: "{{ groups.mongodb_arbiter }}"
  when:
    - inventory_hostname in groups.mongodb
    - groups.mongodb.index(inventory_hostname) == 0
    - groups.mongodb_arbiter is defined

- name: Create the replicaset
  community.mongodb.mongodb_replicaset:
    login_user: "{{ mongodb_auth_enabled is defined and mongodb_auth_enabled | ternary('admin', omit) }}"
    login_password: "{{ mongodb_auth_enabled is defined and mongodb_auth_enabled | ternary(mongo_user_admin_password, omit) }}"
    login_port: "{{ mongo_port }}"
    replica_set: "{{ mongo_replset_name }}"
    members: "{{ mongodb_servers }}"
    arbiter_at_index: "{{ (groups.mongodb_arbiter | default([]) | length > 0) | ternary(mongodb_servers | length - 1, omit) }}"
  when:
    - inventory_hostname in groups.mongodb
    - groups.mongodb.index(inventory_hostname) == 0
  vars:
    ansible_python_interpreter: "{{ python_venv }}/bin/python3"

- name: Ensure replicaset is stable before continuing
  community.mongodb.mongodb_status:
    login_user: "{{ mongodb_auth_enabled is defined and mongodb_auth_enabled | ternary('admin', omit) }}"
    login_password: "{{ mongodb_auth_enabled is defined and mongodb_auth_enabled | ternary(mongo_user_admin_password, omit) }}"
    login_port: "{{ mongo_port }}"
    login_database: admin
    replica_set: "{{ mongo_replset_name }}"
    poll: 3
    interval: 10
    validate: minimal
  register: rs
  failed_when:
    - "'Unable to determine if auth is enabled' not in rs.msg"
    - "'replicaset is in a converged state' not in rs.msg"
  when:
    - inventory_hostname in groups.mongodb
  vars:
    ansible_python_interpreter: "{{ python_venv }}/bin/python3"

- name: Lookup PRIMARY replicaset member
  ansible.builtin.set_fact:
    primary_server: "{{ item.key.split(':')[0] }}"
  loop: "{{ lookup('dict', rs.replicaset) }}"
  when:
    - inventory_hostname in groups.mongodb
    - rs.replicaset is defined
    - "'PRIMARY' in item.value"

# Starting in MongoDB 5.0, the implicit default write concern is w: majority.
# However, special considerations are made for deployments containing arbiters:
# The voting majority of a replica set is 1 plus half the number of voting
# members, rounded down. If the number of data-bearing voting members is not
# greater than the voting majority, the default write concern is { w: 1 }.
# In all other scenarios, the default write concern is { w: "majority" }.
# Specifically, MongoDB uses the following formula to determine the default
# write concern:
#
#   if [ (#arbiters > 0) AND (#non-arbiters <= majority(#voting-nodes)) ]
#     defaultWriteConcern = { w: 1 }
#   else
#     defaultWriteConcern = { w: "majority" }
#
# When there are 2 non-arbiters and 1 arbiter for a total of 3 voting nodes,
# the majority of voting nodes (1 plus half of 3, rounded down) is 2. Therefore
# The number of non-arbiters (2) is equal to the majority of voting nodes (2),
# resulting in an implicit write concern of { w: 1 }. When there are 4
# non-arbiters and 1 arbiter for a total of 5 voting nodes, the majority of
# voting nodes (1 plus half of 5, rounded down) is 3. The number of non-arbiters
# (4) is greater than the majority of voting nodes (3), resulting in an implicit
# write concern of { w: "majority" }.
#
# Thus, conditionally run the following command to force the appropriate
# writeConcern when there is 1 arbiter and 2 non-arbiters.
- name: Adjust the default writeConcern if there are arbiters
  community.mongodb.mongodb_shell:
    mongo_cmd: auto
    login_user: "{{ mongodb_auth_enabled is defined and mongodb_auth_enabled | ternary('admin', omit) }}"
    login_password: "{{ mongodb_auth_enabled is defined and mongodb_auth_enabled | ternary(mongo_user_admin_password, omit) }}"
    login_port: "{{ mongo_port }}"
    login_database: admin
    eval: db.adminCommand({"setDefaultRWConcern":1,"defaultWriteConcern":{"w":1}})
  when:
    - inventory_hostname in groups.mongodb
    - primary_server is defined
    - inventory_hostname == primary_server
    - groups.mongodb | length < 3
    - groups.mongodb_arbiter | default([]) | length > 0
  vars:
    ansible_python_interpreter: "{{ python_venv }}/bin/python3"
