# Copyright (c) 2024, Itential, Inc
# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)
---
- name: Determine release vars
  ansible.builtin.include_tasks:
    file: determine-release-vars.yml

- name: Stat the "current" directory
  ansible.builtin.stat:
    path: "{{ iap_install_dir }}/current"
  register: prev_current

- name: Determine the previous IAP install directory
  ansible.builtin.set_fact:
    prev_iap_install_dir: "{{ prev_current.stat.lnk_target }}"

# Stat the previous custom directory within the "current" directory. We need
# to re-create the symlinks later and we don't want to symlink to the adapters
# in the previous installation directory.
- name: Stat the custom directory within the "current" directory
  ansible.builtin.stat:
    path: "{{ iap_install_dir }}/current/custom"
  register: prev_custom_1

# Find all custom apps/adapters.
# This will identify the package.json files for all customized apps and
# adapters. The list of files found is then saved into a variable called
# "custom_apps" so that later we can use what we found to generate symlinks to
# these locations from their new location. Limiting the depth to 3 for this
# search ensures that we don't mistakenly identify the app's node module
# dependencies as additional things to include and symlink.
- name: Find custom apps/adapters
  ansible.builtin.find:
    paths:
      - "{{ iap_install_dir }}/current/custom"
    patterns:
      - "package.json"
    file_type: file
    depth: 3
    recurse: true
  register: custom_apps
  when: prev_custom_1.stat.exists

- name: Backup mongodb itential database
  ansible.builtin.include_tasks:
    file: backup-mongo.yml
  when: mongo_backup | bool

# Install the new IAP version. Note that the "current" symlink will be
# pointing to the new release after the installation.
- name: Install Platform
  ansible.builtin.include_tasks:
    file: install-platform.yml

- name: Copy old properties.json file to the new install directory
  ansible.builtin.copy:
    src: "{{ prev_iap_install_dir }}/properties.json"
    dest: "{{ iap_install_dir }}/current/properties.json"
    remote_src: true
    mode: "0664"
    owner: "{{ iap_user }}"
    group: "{{ iap_group }}"

# Stat the custom directory again, but this time within the previous installation
# directory, since the "current" symlink has been moved to the new release.
- name: Stat the custom directory within the previous installation directory
  ansible.builtin.stat:
    path: "{{ prev_iap_install_dir }}/custom"
  register: prev_custom_2

# Copy files in old custom directory to new custom directory.
# Customizations such as opensource adapters or customer authored apps need to
# copied from the standard location of .../current/custom to the parallel
# location where the new files have been extracted.
- name: Copy customizations into new location
  ansible.builtin.copy:
    src: "{{ prev_iap_install_dir }}/custom/"
    dest: "{{ iap_install_dir }}/{{ iap_package_name }}/custom"
    remote_src: true
    mode: "0775"
    owner: "{{ iap_user }}"
    group: "{{ iap_group }}"
  when: prev_custom_2.stat.exists

# Make a list of the full paths to the new locations of the apps/adapters
- name: Add all locations to a list
  ansible.builtin.set_fact:
    locations: "{{ locations + [item.path] }}"
  loop: "{{ custom_apps.files }}"
  vars:
    locations: []
  when: custom_apps.files is defined

# For each of the custom apps and adapters that we found read the package.json
- name: Read each of the discovered package.json files
  ansible.builtin.slurp:
    src: "{{ item }}"
  loop: "{{ locations }}"
  vars:
    json_files: []
  register: json_files
  when: locations is defined

# For each package.json file read the name property. This will represent the
# location under the node_modules directory where the symlink should be created.
# The json_files array is the entire package.json file. First, base64 decode the
# contents, then convert to JSON, then use JSON Query to extract the name value.
- name: Query the name property from each package.json file
  ansible.builtin.set_fact:
    links: "{{ links + [item['content'] | b64decode | from_json | json_query('@.name')] }}"
  loop: "{{ json_files.results }}"
  vars:
    links: []
  when: json_files.results is defined

# Make sure that the directories exist under node_modules (where the symlinks
# will eventually be created.) For custom apps/adapters they may not exist. The
# value of item will be something like this: "@itential", so use dirname
- name: Ensure the directories for the symlinks exist
  ansible.builtin.file:
    path: "{{ iap_install_dir }}/current/node_modules/{{ item | dirname }}"
    state: directory
    mode: "0775"
    owner: "{{ iap_user }}"
    group: "{{ iap_group }}"
  loop: "{{ links }}"
  when: links is defined

# Loop through the items of the "locations" list that was created. Each of the
# items in this list represents the source directory of each found app/adapter.
# For each location, create a link under node_modules using the "links" list.
- name: Make all symlinks for custom apps and adapters
  ansible.builtin.file:
    src: "{{ item | dirname }}"
    path: "{{ iap_install_dir }}/current/node_modules/{{ links[i] }}"
    force: true
    state: link
  loop: "{{ locations }}"
  loop_control:
    index_var: i
  when: locations is defined

- name: Set file ownership and permissions
  ansible.builtin.include_tasks:
    file: set-file-ownership.yml

- name: Restart IAP
  ansible.builtin.command: /bin/true
  notify: "Restart IAP"
  changed_when: true
